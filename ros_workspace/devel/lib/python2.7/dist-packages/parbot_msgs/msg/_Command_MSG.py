"""autogenerated by genpy from parbot_msgs/Command_MSG.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Command_MSG(genpy.Message):
  _md5sum = "ca5c1ee62468a3c53b41da450acbca4f"
  _type = "parbot_msgs/Command_MSG"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#name of the command being sent mostly for human readability
string command
#ID is optional it allows for multiple listeners to be differentiated (not generated automatically)
int64 ID
#Boolian flag for the message
bool flag
#numeric value if needed
float64 value
#Boolian for emergency stop if False by default
bool emergency

"""
  __slots__ = ['command','ID','flag','value','emergency']
  _slot_types = ['string','int64','bool','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,ID,flag,value,emergency

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Command_MSG, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = ''
      if self.ID is None:
        self.ID = 0
      if self.flag is None:
        self.flag = False
      if self.value is None:
        self.value = 0.
      if self.emergency is None:
        self.emergency = False
    else:
      self.command = ''
      self.ID = 0
      self.flag = False
      self.value = 0.
      self.emergency = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_qBdB.pack(_x.ID, _x.flag, _x.value, _x.emergency))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.ID, _x.flag, _x.value, _x.emergency,) = _struct_qBdB.unpack(str[start:end])
      self.flag = bool(self.flag)
      self.emergency = bool(self.emergency)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_qBdB.pack(_x.ID, _x.flag, _x.value, _x.emergency))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.ID, _x.flag, _x.value, _x.emergency,) = _struct_qBdB.unpack(str[start:end])
      self.flag = bool(self.flag)
      self.emergency = bool(self.emergency)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_qBdB = struct.Struct("<qBdB")
