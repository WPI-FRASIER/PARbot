"""autogenerated by genpy from parbot_motion_planning/cost_map.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import parbot_motion_planning.msg

class cost_map(genpy.Message):
  _md5sum = "98984950d9fbc7f11f42edf0d7b27051"
  _type = "parbot_motion_planning/cost_map"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 grid_size
int64 row_length
int64 num_rows
int64 x_offset
int64 y_offset
cost_point[] grid

================================================================================
MSG: parbot_motion_planning/cost_point
cart_point point
float64 cost

================================================================================
MSG: parbot_motion_planning/cart_point
float64 x
float64 y

"""
  __slots__ = ['grid_size','row_length','num_rows','x_offset','y_offset','grid']
  _slot_types = ['float64','int64','int64','int64','int64','parbot_motion_planning/cost_point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       grid_size,row_length,num_rows,x_offset,y_offset,grid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cost_map, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.grid_size is None:
        self.grid_size = 0.
      if self.row_length is None:
        self.row_length = 0
      if self.num_rows is None:
        self.num_rows = 0
      if self.x_offset is None:
        self.x_offset = 0
      if self.y_offset is None:
        self.y_offset = 0
      if self.grid is None:
        self.grid = []
    else:
      self.grid_size = 0.
      self.row_length = 0
      self.num_rows = 0
      self.x_offset = 0
      self.y_offset = 0
      self.grid = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d4q.pack(_x.grid_size, _x.row_length, _x.num_rows, _x.x_offset, _x.y_offset))
      length = len(self.grid)
      buff.write(_struct_I.pack(length))
      for val1 in self.grid:
        _v1 = val1.point
        _x = _v1
        buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_d.pack(val1.cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.grid is None:
        self.grid = None
      end = 0
      _x = self
      start = end
      end += 40
      (_x.grid_size, _x.row_length, _x.num_rows, _x.x_offset, _x.y_offset,) = _struct_d4q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grid = []
      for i in range(0, length):
        val1 = parbot_motion_planning.msg.cost_point()
        _v2 = val1.point
        _x = _v2
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.cost,) = _struct_d.unpack(str[start:end])
        self.grid.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d4q.pack(_x.grid_size, _x.row_length, _x.num_rows, _x.x_offset, _x.y_offset))
      length = len(self.grid)
      buff.write(_struct_I.pack(length))
      for val1 in self.grid:
        _v3 = val1.point
        _x = _v3
        buff.write(_struct_2d.pack(_x.x, _x.y))
        buff.write(_struct_d.pack(val1.cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.grid is None:
        self.grid = None
      end = 0
      _x = self
      start = end
      end += 40
      (_x.grid_size, _x.row_length, _x.num_rows, _x.x_offset, _x.y_offset,) = _struct_d4q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.grid = []
      for i in range(0, length):
        val1 = parbot_motion_planning.msg.cost_point()
        _v4 = val1.point
        _x = _v4
        start = end
        end += 16
        (_x.x, _x.y,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 8
        (val1.cost,) = _struct_d.unpack(str[start:end])
        self.grid.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_d4q = struct.Struct("<d4q")
_struct_d = struct.Struct("<d")
