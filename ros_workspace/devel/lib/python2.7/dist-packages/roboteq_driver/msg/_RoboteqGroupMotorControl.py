"""autogenerated by genpy from roboteq_driver/RoboteqGroupMotorControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import roboteq_driver.msg

class RoboteqGroupMotorControl(genpy.Message):
  _md5sum = "702a8e947169b180357862f19d38e10a"
  _type = "roboteq_driver/RoboteqGroupMotorControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Message to control multiple channels of the controller

RoboteqMotorControl[] motors
================================================================================
MSG: roboteq_driver/RoboteqMotorControl
# control a single channel of the controller

# Control Mode Options
uint8 POWER =1
uint8 RPM = 2
uint8 POSITION = 3

# the channel on the controller to control (1 or 2)
uint8 channel
# how to interpert the setpoint
uint8 control_mode
float64 setpoint

"""
  __slots__ = ['motors']
  _slot_types = ['roboteq_driver/RoboteqMotorControl[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoboteqGroupMotorControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motors is None:
        self.motors = []
    else:
      self.motors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.motors)
      buff.write(_struct_I.pack(length))
      for val1 in self.motors:
        _x = val1
        buff.write(_struct_2Bd.pack(_x.channel, _x.control_mode, _x.setpoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.motors is None:
        self.motors = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motors = []
      for i in range(0, length):
        val1 = roboteq_driver.msg.RoboteqMotorControl()
        _x = val1
        start = end
        end += 10
        (_x.channel, _x.control_mode, _x.setpoint,) = _struct_2Bd.unpack(str[start:end])
        self.motors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.motors)
      buff.write(_struct_I.pack(length))
      for val1 in self.motors:
        _x = val1
        buff.write(_struct_2Bd.pack(_x.channel, _x.control_mode, _x.setpoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.motors is None:
        self.motors = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motors = []
      for i in range(0, length):
        val1 = roboteq_driver.msg.RoboteqMotorControl()
        _x = val1
        start = end
        end += 10
        (_x.channel, _x.control_mode, _x.setpoint,) = _struct_2Bd.unpack(str[start:end])
        self.motors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2Bd = struct.Struct("<2Bd")
