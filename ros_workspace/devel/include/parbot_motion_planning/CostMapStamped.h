/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/parbot/ros_workspace/src/parbot_motion_planning/msg/CostMapStamped.msg
 *
 */


#ifndef PARBOT_MOTION_PLANNING_MESSAGE_COSTMAPSTAMPED_H
#define PARBOT_MOTION_PLANNING_MESSAGE_COSTMAPSTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <parbot_motion_planning/CostPointStamped.h>

namespace parbot_motion_planning
{
template <class ContainerAllocator>
struct CostMapStamped_
{
  typedef CostMapStamped_<ContainerAllocator> Type;

  CostMapStamped_()
    : header()
    , grid_size(0.0)
    , row_length(0)
    , num_rows(0)
    , x_offset(0)
    , y_offset(0)
    , grid()  {
    }
  CostMapStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , grid_size(0.0)
    , row_length(0)
    , num_rows(0)
    , x_offset(0)
    , y_offset(0)
    , grid(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _grid_size_type;
  _grid_size_type grid_size;

   typedef int64_t _row_length_type;
  _row_length_type row_length;

   typedef int64_t _num_rows_type;
  _num_rows_type num_rows;

   typedef int64_t _x_offset_type;
  _x_offset_type x_offset;

   typedef int64_t _y_offset_type;
  _y_offset_type y_offset;

   typedef std::vector< ::parbot_motion_planning::CostPointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::parbot_motion_planning::CostPointStamped_<ContainerAllocator> >::other >  _grid_type;
  _grid_type grid;




  typedef boost::shared_ptr< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct CostMapStamped_

typedef ::parbot_motion_planning::CostMapStamped_<std::allocator<void> > CostMapStamped;

typedef boost::shared_ptr< ::parbot_motion_planning::CostMapStamped > CostMapStampedPtr;
typedef boost::shared_ptr< ::parbot_motion_planning::CostMapStamped const> CostMapStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace parbot_motion_planning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'parbot_motion_planning': ['/home/parbot/ros_workspace/src/parbot_motion_planning/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e0ea9cbbb465ffdf093822f72b775f6";
  }

  static const char* value(const ::parbot_motion_planning::CostMapStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e0ea9cbbb465ffdULL;
  static const uint64_t static_value2 = 0xf093822f72b775f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "parbot_motion_planning/CostMapStamped";
  }

  static const char* value(const ::parbot_motion_planning::CostMapStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 grid_size\n\
int64 row_length\n\
int64 num_rows\n\
int64 x_offset\n\
int64 y_offset\n\
CostPointStamped[] grid\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: parbot_motion_planning/CostPointStamped\n\
Header header\n\
geometry_msgs/PointStamped point\n\
float64 cost\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::parbot_motion_planning::CostMapStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.grid_size);
      stream.next(m.row_length);
      stream.next(m.num_rows);
      stream.next(m.x_offset);
      stream.next(m.y_offset);
      stream.next(m.grid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CostMapStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::parbot_motion_planning::CostMapStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::parbot_motion_planning::CostMapStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "grid_size: ";
    Printer<double>::stream(s, indent + "  ", v.grid_size);
    s << indent << "row_length: ";
    Printer<int64_t>::stream(s, indent + "  ", v.row_length);
    s << indent << "num_rows: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_rows);
    s << indent << "x_offset: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x_offset);
    s << indent << "y_offset: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y_offset);
    s << indent << "grid[]" << std::endl;
    for (size_t i = 0; i < v.grid.size(); ++i)
    {
      s << indent << "  grid[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::parbot_motion_planning::CostPointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.grid[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PARBOT_MOTION_PLANNING_MESSAGE_COSTMAPSTAMPED_H
