#include "ros/ros.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/LaserScan.h"
#include "sensor_msgs/PointField.h"

// OpenCv
#include "cv.h"
#include "highgui.h"

// For transforming ROS/OpenCV images
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>

// Messages
#include "sensor_msgs/Image.h"
#include "tf/tfMessage.h"

#include <iostream>
#include <cstdlib>

struct cartPoint {
	float x;
	float y;
	float z;
};


bool zero_point(cartPoint point)
{
	return point.x == point.y && point.x == point.z && point.x == 0;
}

void newPointsCallBack(const sensor_msgs::image)
{
	
}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "pcl2_to_lsc");
	ros::NodeHandle n;
	ros::Subscriber sub = n.subscribe("camera/image/depth", 2, newPointsCallBack);
	ros::spin();
	return 0;
}


