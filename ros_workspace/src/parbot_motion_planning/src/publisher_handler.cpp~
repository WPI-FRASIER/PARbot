#include "publisher_handler.h"

puiblisher_handler::puiblisher_handler(ros::NodeHandle n, std::string publisher_topic)
{
	vel_pub = n.advertise<geometry_msgs::Twist>(publisher_topic, 1);
	msg = geometry_msgs::Twist();
	msg.linear.x = 0;
	msg.angular.z = 0;
	last_msg = ros::Time::now();
	time_delay = (double)1/(double)PUB_HZ;
};

void puiblisher_handler::publish(tentacle* tent)
{
	publish(tent->get_v(), tent->get_w());
	//tent->print_path();
}

double puiblisher_handler::time_since_last_msg()
{
	ros::Time now = ros::Time::now();
	return ((double)now.sec-(double)last_msg.sec)+((double)now.nsec-(double)last_msg.nsec)/1000000000;
}

bool puiblisher_handler::too_soon()
{
	return time_delay > time_since_last_msg();
}

void puiblisher_handler::publish(double v, double w)
{
	if(msg.linear.x == v && msg.angular.z == w && too_soon())
	{
		ROS_INFO("skipping publish %f == %f, %f == %f, %d", msg.linear.x, v, msg.angular.z, w, too_soon());
		return;
	}
	ROS_INFO("not skipping publish %f == %f, %f == %f, %f < %f", msg.linear.x, v, msg.angular.z, w, time_delay, time_since_last_msg());
	msg.linear.x = v;//0;//
	msg.angular.z = w;//0;//
	if(CAN_MOVE)
	{
		last_msg = ros::Time::now();
		vel_pub.publish(msg);
	}
	//ROS_INFO("Publishing disabled would have sent v=%f w=%f",v,w);
}
