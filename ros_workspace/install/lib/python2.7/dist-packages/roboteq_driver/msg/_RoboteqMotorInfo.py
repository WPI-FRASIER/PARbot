"""autogenerated by genpy from roboteq_driver/RoboteqMotorInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import sensor_msgs.msg

class RoboteqMotorInfo(genpy.Message):
  _md5sum = "ad7e3baf491ed3e6aaae1fd395568d05"
  _type = "roboteq_driver/RoboteqMotorInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# the current status for a channel on the motor controller

uint8 channel
float64 position
float64 velocity
float64 current
sensor_msgs/Temperature temp
================================================================================
MSG: sensor_msgs/Temperature
 # Single temperature reading.

 Header header           # timestamp is the time the temperature was measured
                         # frame_id is the location of the temperature reading

 float64 temperature     # Measurement of the Temperature in Degrees Celsius

 float64 variance        # 0 is interpreted as variance unknown
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['channel','position','velocity','current','temp']
  _slot_types = ['uint8','float64','float64','float64','sensor_msgs/Temperature']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       channel,position,velocity,current,temp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoboteqMotorInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.channel is None:
        self.channel = 0
      if self.position is None:
        self.position = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.current is None:
        self.current = 0.
      if self.temp is None:
        self.temp = sensor_msgs.msg.Temperature()
    else:
      self.channel = 0
      self.position = 0.
      self.velocity = 0.
      self.current = 0.
      self.temp = sensor_msgs.msg.Temperature()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B3d3I.pack(_x.channel, _x.position, _x.velocity, _x.current, _x.temp.header.seq, _x.temp.header.stamp.secs, _x.temp.header.stamp.nsecs))
      _x = self.temp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.temp.temperature, _x.temp.variance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.temp is None:
        self.temp = sensor_msgs.msg.Temperature()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.channel, _x.position, _x.velocity, _x.current, _x.temp.header.seq, _x.temp.header.stamp.secs, _x.temp.header.stamp.nsecs,) = _struct_B3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.temp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.temp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.temp.temperature, _x.temp.variance,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B3d3I.pack(_x.channel, _x.position, _x.velocity, _x.current, _x.temp.header.seq, _x.temp.header.stamp.secs, _x.temp.header.stamp.nsecs))
      _x = self.temp.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d.pack(_x.temp.temperature, _x.temp.variance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.temp is None:
        self.temp = sensor_msgs.msg.Temperature()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.channel, _x.position, _x.velocity, _x.current, _x.temp.header.seq, _x.temp.header.stamp.secs, _x.temp.header.stamp.nsecs,) = _struct_B3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.temp.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.temp.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.temp.temperature, _x.temp.variance,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_B3d3I = struct.Struct("<B3d3I")
